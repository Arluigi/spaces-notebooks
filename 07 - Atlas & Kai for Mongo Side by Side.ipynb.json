{
  "cells": [
    {
      "cell_type": "markdown",
      "id": "48a6458f-75ed-4a6c-aaa8-184bb9edfb75",
      "metadata": {
        "execution": {},
        "tags": []
      },
      "source": "<img src=https://raw.githubusercontent.com/singlestore-labs/notebook-picture/main/Mongo_DB_SingleStoreDB.png width=\"1100\">"
    },
    {
      "cell_type": "markdown",
      "id": "5353b6a2-006f-4a71-834f-045d3e054640",
      "metadata": {
        "execution": {},
        "tags": []
      },
      "source": "# No code change required! 100% MongoDB notebook!\nGiven the small dataset, the objective of that notebook is not to compare performance \n## What you will learn in this notebook:\n1. Install libraries and import modules\n2. Connect to a MongoDB Atlas and SingleStoreDB Kai for Mongo endpoints\n3. Copy Atlas collections into SingleStoreDB - Synthetic collections are about retail sales transactions with customer information\n## Compare performance on same code from simple to more complex queries\n4. Document counts\n5. Product Quantity Sold\n6. Average Customer Satisfaction\n7. Average Satisfaction per Product\n8. #Transactions by location and membership\n9. Top 10 Product Sales"
    },
    {
      "cell_type": "markdown",
      "id": "a5f3d92f-5721-4f28-a91a-b04def563dfb",
      "metadata": {},
      "source": "# 1. Install libraries and import modules"
    },
    {
      "cell_type": "markdown",
      "id": "856860b6-c6ac-4f72-8d64-5d405dbb7acc",
      "metadata": {},
      "source": "#### Make sure that you have a created MongoDB enabled workspace"
    },
    {
      "cell_type": "markdown",
      "id": "33506e25-c044-4f6f-9d62-df61783076e1",
      "metadata": {},
      "source": "<img src=https://raw.githubusercontent.com/singlestore-labs/notebook-picture/main/mongo-enabled-workspace.png width=\"500\">"
    },
    {
      "cell_type": "code",
      "execution_count": 10,
      "id": "26ec8d2d-25b1-4b8f-a62f-098192b8d45f",
      "metadata": {
        "execution": {},
        "tags": [],
        "trusted": true
      },
      "outputs": [],
      "source": "!pip install pymongo pandas matplotlib pymongo plotly ipywidgets --quiet"
    },
    {
      "cell_type": "code",
      "execution_count": 11,
      "id": "3722ef02-42b0-41af-869a-b4b1f7f62e02",
      "metadata": {
        "execution": {},
        "tags": [],
        "trusted": true
      },
      "outputs": [],
      "source": "import time\nimport pymongo\nfrom pymongo import MongoClient\nimport os\nimport numpy as np\nimport pandas as pd\nimport plotly.express as px\nimport plotly.subplots as sp\nfrom plotly.offline import plot, iplot, init_notebook_mode"
    },
    {
      "cell_type": "markdown",
      "id": "b96597f7-68e1-45d3-bbb0-dbfb5f440881",
      "metadata": {},
      "source": "# 2. Connect to Atlas and SingleStoreDB Mongo endpoints\nWe are using a shared tier on the backend for Atlas"
    },
    {
      "cell_type": "code",
      "execution_count": 12,
      "id": "d038bacc-ae3d-450e-a955-a304f9a07c74",
      "metadata": {
        "execution": {},
        "tags": [],
        "trusted": true
      },
      "outputs": [],
      "source": "# No need to edit anything\nmyclientmongodb = pymongo.MongoClient(\"mongodb+srv://mongo_sample_reader:SingleStoreRocks27017@cluster1.tfutgo0.mongodb.net/?retryWrites=true&w=majority\")\nmydbmongodb = myclientmongodb[\"new_transactions\"]\nmongoitems = mydbmongodb[\"items\"]\nmongocusts = mydbmongodb[\"custs\"]\nmongotxs = mydbmongodb[\"txs\"]"
    },
    {
      "cell_type": "markdown",
      "id": "4e8f3c25-3399-4095-a034-438617daa5da",
      "metadata": {},
      "source": "#### Select the workspace that you want to use\n<img src=https://raw.githubusercontent.com/singlestore-labs/notebook-picture/main/Select%20Workspace%20and%20Database.png width=\"500\">"
    },
    {
      "cell_type": "code",
      "execution_count": 21,
      "id": "e53b6983-8c62-4b45-85d5-fb29fb655936",
      "metadata": {
        "execution": {},
        "tags": [],
        "trusted": true
      },
      "outputs": [],
      "source": "s2clientmongodb = pymongo.MongoClient(connection_url_mongo)\ns2dbmongodb = s2clientmongodb[\"new_transactions\"]\ns2mongoitems = s2dbmongodb[\"items\"]\ns2mongocusts = s2dbmongodb[\"custs\"]\ns2mongotxs = s2dbmongodb[\"txs\"]  "
    },
    {
      "cell_type": "markdown",
      "id": "a6f36725-4b74-4460-b1c9-a0144159a7b4",
      "metadata": {},
      "source": "# 3. Copy Atlas collections into SingleStoreDB Kai for Mongo"
    },
    {
      "cell_type": "code",
      "execution_count": 64,
      "id": "5cb978bc-03cc-4477-853d-577fc856ca94",
      "metadata": {
        "execution": {},
        "tags": [],
        "trusted": true
      },
      "outputs": [],
      "source": "mongocollections = [mongoitems,mongocusts,mongotxs]\n\nfor mongo_collection in mongocollections:\n    df = pd.DataFrame(list(mongo_collection.find()))\n    df.reset_index(drop=True, inplace=True)\n    data_dict = df.to_dict(\"records\")\n    s2mongo_collection = s2dbmongodb[mongo_collection.name]\n    s2mongo_collection.insert_many(data_dict)"
    },
    {
      "cell_type": "code",
      "execution_count": 66,
      "id": "91ce2d6e-3d02-4c57-88f7-365d7449d84c",
      "metadata": {
        "execution": {},
        "tags": [],
        "trusted": true
      },
      "outputs": [],
      "source": "#count documents in SingleStore\nmg_count = s2mongoitems.count_documents({})\nprint(mg_count)"
    },
    {
      "cell_type": "markdown",
      "id": "48841366-41fb-45f6-81d7-323cda1b1df7",
      "metadata": {},
      "source": "# Compare Queries and Performance"
    },
    {
      "cell_type": "markdown",
      "id": "2069ac4e-13a0-425a-b063-7434b339dd8e",
      "metadata": {},
      "source": "#### In-app analytics is everywhere\n\n<img src=https://raw.githubusercontent.com/singlestore-labs/notebook-picture/main/In_app_analytics.png width=\"600\">"
    },
    {
      "cell_type": "markdown",
      "id": "01f555e2-b809-4261-a8df-0669be80377c",
      "metadata": {},
      "source": "### 4. Document counts"
    },
    {
      "cell_type": "code",
      "execution_count": 67,
      "id": "f1c54716-a4e9-49ae-9035-75a4c3761c90",
      "metadata": {
        "execution": {},
        "tags": [],
        "trusted": true
      },
      "outputs": [],
      "source": "num_iterations = 10\nmongo_times = []\n\nfor i in range (num_iterations):\n    mg_start_time = time.time()\n    mg_count = mongoitems.count_documents({})\n    mg_stop_time = time.time()\n    mongo_times.append(mg_stop_time - mg_start_time)\n\ns2_times = []\nfor i in range (num_iterations):\n    s2_start_time = time.time()\n    s2_count = s2mongoitems.count_documents({})\n    s2_stop_time = time.time()\n    s2_times.append(s2_stop_time - s2_start_time)\n    \nx_axis = [i + 1 for i in range(num_iterations)]\ndata = {'iteration' : x_axis,\n        'mongo_times' : mongo_times,\n        's2_times' : s2_times}\n    \ndf = pd.DataFrame.from_dict(data)\ndata_2 = {'counts': [mg_count, s2_count],\n        'connection_type': [\"mongodb\", \"singlestore\"]}\ndf_2 = pd.DataFrame.from_dict(data_2)\n\nfigures = [\n    px.line(df.iloc[1:], x='iteration', y=['mongo_times', 's2_times']),\n    px.bar(df_2, x=\"connection_type\", y=\"counts\", color=\"connection_type\")\n]\n\nfig = sp.make_subplots(rows=1, cols=2, subplot_titles=[\"Document Count Execution Time\",\"Document Counts\"])\nfor i, figure in enumerate(figures):\n    for trace in range(len(figure[\"data\"])):\n        fig.append_trace(figure[\"data\"][trace], row=1, col=i+1)\n\n        \nfig.update_yaxes(title_text=\"Time in Seconds\", row=1, col=1)\nfig.update_xaxes(title_text=\"Iteration\", row=1, col=1)\nfig.update_xaxes(title_text=\"Iteration\", row=1, col=1)\nfig.update_xaxes(tickmode='array', tickvals=[1, 2, 3, 4, 5,6,7,8,9,10], row=1, col=1)\n\nfig"
    },
    {
      "cell_type": "markdown",
      "id": "94d4c502-fb66-45cb-a520-6ee39ae35476",
      "metadata": {},
      "source": "### 5. Product Quantity Sold"
    },
    {
      "cell_type": "code",
      "execution_count": 68,
      "id": "6de02fc3-fe7b-4dd4-a495-d0e785f4c58f",
      "metadata": {
        "execution": {},
        "tags": [],
        "trusted": true
      },
      "outputs": [],
      "source": "num_iterations = 10\nmongo_times = []\npipeline = [\n    {\n        \"$group\": {\"_id\": \"$item.name\", \"totalQuantity\": {\"$sum\": \"$item.quantity\"}}\n    },\n    {\n        \"$sort\" : {\"totalQuantity\": -1}\n    },\n    { \n        \"$limit\" : 5\n        \n    }\n]\nfor i in range (num_iterations):\n    mg_start_time = time.time()\n    mg_result = mongoitems.aggregate(pipeline)\n    mg_stop_time = time.time()\n    mongo_times.append(mg_stop_time - mg_start_time)\n\ns2_times = []\nfor i in range (num_iterations):\n    s2_start_time = time.time()\n    s2_result = s2mongoitems.aggregate(pipeline)\n    s2_stop_time = time.time()\n    s2_times.append(s2_stop_time - s2_start_time)\n    \nx_axis = [i + 1 for i in range(num_iterations)]\ndata = {'iteration' : x_axis,\n        'mongo_times' : mongo_times,\n        's2_times' : s2_times}\n    \ndf = pd.DataFrame.from_dict(data)\n\nitem_names = [] \nitem_quantity = []\nfor i in mg_result:\n    item_names.append(i[\"_id\"])\n    item_quantity.append(i[\"totalQuantity\"])\n\nfigures = [\n    px.line(df.iloc[1:], x='iteration', y=['mongo_times', 's2_times']),\n    px.bar(x=item_names, y=item_quantity)\n]\n\nfig = sp.make_subplots(rows=1, cols=2, subplot_titles=[\"Execution Time\",\"Comparison of Product Quantity Sold\"])\nfor i, figure in enumerate(figures):\n    for trace in range(len(figure[\"data\"])):\n        fig.append_trace(figure[\"data\"][trace], row=1, col=i+1)\n\n        \nfig.update_yaxes(title_text=\"Time in Seconds\", row=1, col=1)\nfig.update_xaxes(title_text=\"Iteration\", row=1, col=1)\nfig.update_xaxes(title_text=\"Iteration\", row=1, col=1)\nfig.update_xaxes(tickmode='array', tickvals=[1, 2, 3,4,5,6,7,8,9,10], row=1, col=1)\n\nfig"
    },
    {
      "cell_type": "markdown",
      "id": "9f11b18f-d414-4107-83a9-5d9d10172d6a",
      "metadata": {},
      "source": "### 6. Average Customer Satisfaction"
    },
    {
      "cell_type": "code",
      "execution_count": 70,
      "id": "c4bfc8e2-3f72-47be-b789-8f44a547ef60",
      "metadata": {
        "execution": {},
        "tags": [],
        "trusted": true
      },
      "outputs": [],
      "source": "num_iterations = 10\nmongo_times = []\npipeline = [\n    {\n        '$group': {\n            '_id': '$customer.email', \n            'average_satisfaction': {\n                '$avg': '$customer.satisfaction'\n            }\n        }\n    },\n    {'$limit' : 10}\n]\nfor i in range (num_iterations):\n    mg_start_time = time.time()\n    mg_result = mongotxs.aggregate(pipeline)\n    mg_stop_time = time.time()\n    mongo_times.append(mg_stop_time - mg_start_time)\n\ns2_times = []\nfor i in range (num_iterations):\n    s2_start_time = time.time()\n    s2_result = s2mongotxs.aggregate(pipeline)\n    s2_stop_time = time.time()\n    s2_times.append(s2_stop_time - s2_start_time)\n    \nx_axis = [i + 1 for i in range(num_iterations)]\ndata = {'iteration' : x_axis,\n        'mongo_times' : mongo_times,\n        's2_times' : s2_times}\n    \ndf = pd.DataFrame.from_dict(data)\n\nitem_names = [] \nitem_quantity = []\nfor i in mg_result:\n    item_names.append(i[\"_id\"])\n    item_quantity.append(i[\"average_satisfaction\"])\n\nfigures = [\n    px.line(df.iloc[1:], x='iteration', y=['mongo_times', 's2_times']),\n    px.bar(x=item_names, y=item_quantity)\n]\n\nfig = sp.make_subplots(rows=1, cols=2, subplot_titles=[\"Execution Time\",\"Average Customer Satisfaction\"])\nfor i, figure in enumerate(figures):\n    for trace in range(len(figure[\"data\"])):\n        fig.append_trace(figure[\"data\"][trace], row=1, col=i+1)\n\n        \nfig.update_yaxes(title_text=\"Time in Seconds\", row=1, col=1)\nfig.update_xaxes(title_text=\"Iteration\", row=1, col=1)\nfig.update_xaxes(title_text=\"Iteration\", row=1, col=1)\nfig.update_xaxes(tickmode='array', tickvals=[1, 2, 3,4,5,6,7,8,9,10], row=1, col=1)\n\nfig"
    },
    {
      "cell_type": "markdown",
      "id": "e6657ab9-551b-4d09-a1be-50a1b9091558",
      "metadata": {},
      "source": "### 7. Average Satisfaction per Product"
    },
    {
      "cell_type": "code",
      "execution_count": 73,
      "id": "8015fdd4-c6eb-437a-9d60-ee937817caf3",
      "metadata": {
        "execution": {},
        "tags": [],
        "trusted": true
      },
      "outputs": [],
      "source": "num_iterations = 10\nmongo_times = []\npipeline = [{ \"$lookup\":\n      {\n          \"from\": \"txs\",\n          \"localField\": \"tx_id\",\n          \"foreignField\" : \"transaction_id\",\n          \"as\": \"transaction_links\"}\n },\n    { \"$limit\": 10 },\n    {\"$unwind\": \"$transaction_links\" },\n    {\"$group\" : \n         {\n             \"_id\" : {\n                 \"item\" : \"$item.name\"\n             },\n             \"Average Satisfaction\" : {\"$avg\" : \"$transaction_links.customer.satisfaction\"}\n         }\n    }\n]\nfor i in range (num_iterations):\n    mg_start_time = time.time()\n    mg_result = mongoitems.aggregate(pipeline)\n    mg_stop_time = time.time()\n    mongo_times.append(mg_stop_time - mg_start_time)\n\ns2_times = []\nfor i in range (num_iterations):\n    s2_start_time = time.time()\n    s2_result = s2mongoitems.aggregate(pipeline)\n    s2_stop_time = time.time()\n    s2_times.append(s2_stop_time - s2_start_time)\n    \nx_axis = [i + 1 for i in range(num_iterations)]\ndata = {'iteration' : x_axis,\n        'mongo_times' : mongo_times,\n        's2_times' : s2_times}\n    \ndf = pd.DataFrame.from_dict(data)\n\nitem_names = [] \nitem_quantity = []\nfor i in mg_result:\n    item_names.append(i[\"_id\"]['item'])\n    item_quantity.append(i[\"Average Satisfaction\"])\n    \nfigures = [\n    px.line(df.iloc[1:], x='iteration', y=['mongo_times', 's2_times']),\n    px.bar(x=item_names, y=item_quantity)\n]\n\nfig = sp.make_subplots(rows=1, cols=2, subplot_titles=[\"Execution Time\",\"Average Satisfaction per Product\"])\nfor i, figure in enumerate(figures):\n    for trace in range(len(figure[\"data\"])):\n        fig.append_trace(figure[\"data\"][trace], row=1, col=i+1)\n        \nfig.update_yaxes(title_text=\"Time in Seconds\", row=1, col=1)\nfig.update_xaxes(title_text=\"Iteration\", row=1, col=1)\nfig.update_xaxes(title_text=\"Iteration\", row=1, col=1)\nfig.update_xaxes(tickmode='array', tickvals=[1, 2, 3, 4, 5,6, 7, 8, 9, 10], row=1, col=1)\n\nfig"
    },
    {
      "cell_type": "markdown",
      "id": "b14eb709-b58b-461e-b415-a4ca3461b1a6",
      "metadata": {},
      "source": "### 8. #Transactions by location and membership"
    },
    {
      "cell_type": "code",
      "execution_count": 74,
      "id": "78abd324-cace-4ad6-abe7-d1b5d166a7e7",
      "metadata": {
        "execution": {},
        "tags": [],
        "trusted": true
      },
      "outputs": [],
      "source": "num_iterations = 10\nmongo_times = []\npipeline = [{ \"$lookup\":\n      {\n          \"from\": \"custs\",\n          \"localField\": \"customer.email\",\n          \"foreignField\" : \"email\",\n          \"as\": \"transaction_links\"}\n },\n    { \"$limit\": 100 },\n     {\"$group\" : \n         {\n             \"_id\" : {\n                 \"location\" : \"$store_location\",\n                 \"membership\" :\"$transaction_links.membership\"\n             },\n             \"count\" : {\"$sum\" : 1}\n         }\n    },\n    {\"$sort\" : {\"count\" :-1}}\n]\nfor i in range (num_iterations):\n    mg_start_time = time.time()\n    mg_result = mongotxs.aggregate(pipeline)\n    mg_stop_time = time.time()\n    mongo_times.append(mg_stop_time - mg_start_time)\n\ns2_times = []\nfor i in range (num_iterations):\n    s2_start_time = time.time()\n    s2_result = s2mongotxs.aggregate(pipeline)\n    s2_stop_time = time.time()\n    s2_times.append(s2_stop_time - s2_start_time)\n    \nx_axis = [i + 1 for i in range(num_iterations)]\ndata = {'iteration' : x_axis,\n        'mongo_times' : mongo_times,\n        's2_times' : s2_times}\n    \ndf = pd.DataFrame.from_dict(data)\n\nitem_names = [] \nitem_quantity = []\nfor i in mg_result:\n    toadd = i[\"_id\"]['location'] + ', ' + i[\"_id\"]['membership'][0]\n    item_names.append(toadd)\n    item_quantity.append(i['count'])\n    \nfigures = [\n    px.line(df.iloc[1:], x='iteration', y=['mongo_times', 's2_times']),\n    px.bar(x=item_names, y=item_quantity)\n]\n\nfig = sp.make_subplots(rows=1, cols=2, subplot_titles=[\"Execution Time\",\"Sales per Store\"])\nfor i, figure in enumerate(figures):\n    for trace in range(len(figure[\"data\"])):\n        fig.append_trace(figure[\"data\"][trace], row=1, col=i+1)\n\n        \nfig.update_yaxes(title_text=\"Time in Seconds\", row=1, col=1)\nfig.update_xaxes(title_text=\"Iteration\", row=1, col=1)\nfig.update_xaxes(title_text=\"Iteration\", row=1, col=1)\nfig.update_xaxes(tickmode='array', tickvals=[1, 2, 3, 4, 5,6,7,8,9,10], row=1, col=1)\n\nfig"
    },
    {
      "cell_type": "markdown",
      "id": "83fa3e5c-975e-410c-a25e-4db2b8389952",
      "metadata": {},
      "source": "### 9. Top 10 Product Sales"
    },
    {
      "cell_type": "code",
      "execution_count": 75,
      "id": "57a5a473-e840-4310-8f31-c53d9420a4cc",
      "metadata": {
        "execution": {},
        "tags": [],
        "trusted": true
      },
      "outputs": [],
      "source": "num_iterations = 10\nmongo_times = []\npipeline = [\n    {\n        \"$project\": {\n            \"item\": 1,\n            \"revenue\": { \"$multiply\": [\"$item.price\", \"$item.quantity\"] }\n        }\n    },\n    {\n        \"$group\": {\n            \"_id\": \"$item.name\",\n            \"total_revenue\": { \"$sum\": \"$revenue\" }\n        }\n    },\n    {\n        \"$sort\": { \"total_revenue\": -1 }\n    },\n    {\n        \"$limit\": 10\n    }\n]\n\nfor i in range (num_iterations):\n    mg_start_time = time.time()\n    mg_result = mongoitems.aggregate(pipeline)\n    mg_stop_time = time.time()\n    mongo_times.append(mg_stop_time - mg_start_time)\n\ns2_times = []\nfor i in range (num_iterations):\n    s2_start_time = time.time()\n    s2_result = s2mongoitems.aggregate(pipeline)\n    s2_stop_time = time.time()\n    s2_times.append(s2_stop_time - s2_start_time)\n    \nx_axis = [i + 1 for i in range(num_iterations)]\ndata = {'iteration' : x_axis,\n        'mongo_times' : mongo_times,\n        's2_times' : s2_times}\n    \ndf = pd.DataFrame.from_dict(data)\n\nitem_names = [] \nitem_quantity = []\nfor i, result in enumerate(mg_result):\n    if i >= 1:\n        toadd = result[\"_id\"]\n        item_names.append(toadd)\n        item_quantity.append(result['total_revenue'])\n\nfigures = [\n    px.line(df.iloc[1:], x='iteration', y=['mongo_times', 's2_times']), # Exclude the first iteration from the line chart\n    px.bar(x=item_names, y=item_quantity)\n]\n\nfig = sp.make_subplots(rows=1, cols=2, subplot_titles=[\"Execution Time\",\"Top 10 Product Sales\"])\nfor i, figure in enumerate(figures):\n    for trace in range(len(figure[\"data\"])):\n        fig.append_trace(figure[\"data\"][trace], row=1, col=i+1)\n\n        \nfig.update_yaxes(title_text=\"Time in Seconds\", row=1, col=1)\nfig.update_xaxes(title_text=\"Iteration\", row=1, col=1)\nfig.update_xaxes(title_text=\"Iteration\", row=1, col=1)\nfig.update_xaxes(tickmode='array', tickvals=[1, 2, 3, 4, 5,6,7,8,9,10], row=1, col=1)\n\nfig"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "e9465580-137f-46c3-946a-2d205689a158",
      "metadata": {},
      "outputs": [],
      "source": ""
    }
  ],
  "metadata": {
    "jupyterlab": {
      "notebooks": {
        "version_major": 6,
        "version_minor": 4
      }
    },
    "kernelspec": {
      "display_name": "Python 3 (ipykernel)",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.10.9"
    },
    "singlestore_connection": {}
  },
  "nbformat": 4,
  "nbformat_minor": 5
}